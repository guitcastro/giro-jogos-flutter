rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && getUserId() == ownerId;
    }
    
    function isMember(ownerId, participants) {
      return isAuthenticated() && (getUserId() == ownerId || getUserId() in participants);
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && getUserId() == userId;
    }
    
    // Duos collection com invites como subcoleção
    match /duos/{duoId}/invites/{inviteCode} {
      // Leitura: só se o inviteCode do path for igual ao do documento
      allow get: if isAuthenticated() && inviteCode == resource.data.inviteCode;
      allow list: if false;

      // Criação: qualquer usuário autenticado pode criar um duo, inviteCode obrigatório, máximo 2 participantes
      allow create: if isAuthenticated() &&
        request.resource.data.participants is list &&
        request.resource.data.participants.size() == 2 &&
        request.resource.data.inviteCode is string &&
        request.resource.data.inviteCode.size() == 6 &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp &&
        inviteCode == request.resource.data.inviteCode;

      // Atualização: só pode atualizar participantes (adicionar/remover), inviteCode não pode mudar, máximo 2 participantes
      allow update: if isAuthenticated() &&
        request.resource.data.inviteCode == resource.data.inviteCode &&
        request.resource.data.participants is list &&
        request.resource.data.participants.size() == 2 &&
        inviteCode == resource.data.inviteCode;

      // Exclusão: qualquer participante pode deletar
      allow delete: if isAuthenticated() && getUserId() in resource.data.participants && inviteCode == resource.data.inviteCode;
    }
    
    // Games collection (existing)
    match /games/{gameId} {
      allow read: if true;
      allow write: if isAuthenticated() && get(/databases/$(database)/documents/users/$(getUserId())).data.isAdmin == true;
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
